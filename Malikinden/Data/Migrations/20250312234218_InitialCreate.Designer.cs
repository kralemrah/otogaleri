// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MalikindenDbContext))]
    [Migration("20250312234218_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Arac", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anasayfa")
                        .HasColumnType("bit");

                    b.Property<int>("BeygirGucu")
                        .HasColumnType("int");

                    b.Property<DateTime>("EklenmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fiyat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("KasaTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kilometre")
                        .HasColumnType("int");

                    b.Property<int>("MarkaId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ModelYili")
                        .HasColumnType("int");

                    b.Property<double>("MotorHacmi")
                        .HasColumnType("float");

                    b.Property<string>("Resim1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resim2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resim3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SatistaMi")
                        .HasColumnType("bit");

                    b.Property<string>("VitesTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YakitTipi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("YakitTuketimi")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MarkaId");

                    b.ToTable("Araclar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Anasayfa = true,
                            BeygirGucu = 136,
                            EklenmeTarihi = new DateTime(2025, 3, 13, 2, 42, 18, 595, DateTimeKind.Local).AddTicks(6921),
                            Fiyat = 850000m,
                            KasaTipi = "Sedan",
                            Kilometre = 45000,
                            MarkaId = 1,
                            Model = "Civic",
                            ModelYili = 2020,
                            MotorHacmi = 1.6000000000000001,
                            SatistaMi = true,
                            VitesTipi = "Otomatik",
                            YakitTipi = "Benzin",
                            YakitTuketimi = 5.2000000000000002
                        },
                        new
                        {
                            Id = 2,
                            Anasayfa = true,
                            BeygirGucu = 100,
                            EklenmeTarihi = new DateTime(2025, 3, 13, 2, 42, 18, 595, DateTimeKind.Local).AddTicks(6923),
                            Fiyat = 550000m,
                            KasaTipi = "Hatchback",
                            Kilometre = 68000,
                            MarkaId = 2,
                            Model = "Clio",
                            ModelYili = 2019,
                            MotorHacmi = 1.3999999999999999,
                            SatistaMi = true,
                            VitesTipi = "Manuel",
                            YakitTipi = "Dizel",
                            YakitTuketimi = 4.7999999999999998
                        },
                        new
                        {
                            Id = 3,
                            Anasayfa = true,
                            BeygirGucu = 190,
                            EklenmeTarihi = new DateTime(2025, 3, 13, 2, 42, 18, 595, DateTimeKind.Local).AddTicks(6925),
                            Fiyat = 1250000m,
                            KasaTipi = "Sedan",
                            Kilometre = 25000,
                            MarkaId = 3,
                            Model = "Passat",
                            ModelYili = 2021,
                            MotorHacmi = 2.0,
                            SatistaMi = true,
                            VitesTipi = "Otomatik",
                            YakitTipi = "Benzin",
                            YakitTuketimi = 7.2000000000000002
                        },
                        new
                        {
                            Id = 4,
                            Anasayfa = true,
                            BeygirGucu = 145,
                            EklenmeTarihi = new DateTime(2025, 3, 13, 2, 42, 18, 595, DateTimeKind.Local).AddTicks(6926),
                            Fiyat = 950000m,
                            KasaTipi = "Sedan",
                            Kilometre = 15000,
                            MarkaId = 4,
                            Model = "Corolla",
                            ModelYili = 2022,
                            MotorHacmi = 1.5,
                            SatistaMi = true,
                            VitesTipi = "Otomatik",
                            YakitTipi = "Hibrit",
                            YakitTuketimi = 3.8999999999999999
                        });
                });

            modelBuilder.Entity("Entity.Kullanici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("AktifMi")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EklenmeTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KullaniciAdi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.Property<string>("Sifre")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Soyadi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Kullanicilar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adi = "Admin",
                            AktifMi = true,
                            EklenmeTarihi = new DateTime(2025, 3, 13, 2, 42, 18, 595, DateTimeKind.Local).AddTicks(6340),
                            Email = "admin@gmail.com",
                            KullaniciAdi = "xkraltr",
                            RolId = 1,
                            Sifre = "5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5",
                            Soyadi = "Adminoglu",
                            Telefon = "0506892852"
                        });
                });

            modelBuilder.Entity("Entity.Marka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Markalar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adi = "Honda"
                        },
                        new
                        {
                            Id = 2,
                            Adi = "Renault"
                        },
                        new
                        {
                            Id = 3,
                            Adi = "Volkswagen"
                        },
                        new
                        {
                            Id = 4,
                            Adi = "Toyota"
                        });
                });

            modelBuilder.Entity("Entity.Musteri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notlar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Soyadi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TalepId")
                        .HasColumnType("int");

                    b.Property<string>("TcNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TelNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AracId");

                    b.HasIndex("TalepId");

                    b.ToTable("Musteriler");
                });

            modelBuilder.Entity("Entity.Opsiyon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<bool>("EpostaGonderildiMi")
                        .HasColumnType("bit");

                    b.Property<int>("MusteriId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OpsiyonBitisTarihi")
                        .HasColumnType("datetime2");

                    b.Property<int>("OpsiyonFiyati")
                        .HasColumnType("int");

                    b.Property<DateTime?>("OpsiyonTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AracId");

                    b.HasIndex("MusteriId");

                    b.ToTable("Opsiyonlar");
                });

            modelBuilder.Entity("Entity.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roller");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adi = "Admin"
                        });
                });

            modelBuilder.Entity("Entity.Satis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AracId")
                        .HasColumnType("int");

                    b.Property<int>("MusteriId")
                        .HasColumnType("int");

                    b.Property<int>("SatisFiyati")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SatisTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AracId");

                    b.HasIndex("MusteriId");

                    b.ToTable("Satislar");
                });

            modelBuilder.Entity("Entity.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acıklama")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Baslik")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resim")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliderlar");
                });

            modelBuilder.Entity("Entity.Talep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Talepler");
                });

            modelBuilder.Entity("Entity.Arac", b =>
                {
                    b.HasOne("Entity.Marka", "Marka")
                        .WithMany()
                        .HasForeignKey("MarkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marka");
                });

            modelBuilder.Entity("Entity.Kullanici", b =>
                {
                    b.HasOne("Entity.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Entity.Musteri", b =>
                {
                    b.HasOne("Entity.Arac", "Arac")
                        .WithMany()
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Talep", "Talep")
                        .WithMany()
                        .HasForeignKey("TalepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arac");

                    b.Navigation("Talep");
                });

            modelBuilder.Entity("Entity.Opsiyon", b =>
                {
                    b.HasOne("Entity.Arac", "Arac")
                        .WithMany()
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Musteri", "Musteri")
                        .WithMany("Opsiyonlar")
                        .HasForeignKey("MusteriId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Arac");

                    b.Navigation("Musteri");
                });

            modelBuilder.Entity("Entity.Satis", b =>
                {
                    b.HasOne("Entity.Arac", "Arac")
                        .WithMany()
                        .HasForeignKey("AracId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Musteri", "Musteri")
                        .WithMany()
                        .HasForeignKey("MusteriId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Arac");

                    b.Navigation("Musteri");
                });

            modelBuilder.Entity("Entity.Musteri", b =>
                {
                    b.Navigation("Opsiyonlar");
                });
#pragma warning restore 612, 618
        }
    }
}
